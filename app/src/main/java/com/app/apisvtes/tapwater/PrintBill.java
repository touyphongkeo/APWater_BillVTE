package com.app.apisvtes.tapwater;

import android.app.Activity;
import android.bluetooth.*;
import android.content.*;
import android.graphics.*;
import android.util.Log;
import com.app.apisvtes.R;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import static com.app.apisvtes.tapwater.ClassLibs.*;

/**
 * Created by Admin on 29/03/2017.
 */

public class PrintBill {

    static BluetoothDevice device;
    static BluetoothSocket bluetoothSocket;
    static OutputStream outputStream;
    private static StringBuffer sb;
    private static ArrayList<String> listimage;
    private static String[] byteimage;
    private static String[] bytenumber;
    private static String[] bytenumber1;
    private static String[] bytenumber2;
    private static String[] bytenumber3;
    private static String  DT,DT1,DT2,DT3,DT4;
    private static Date dte1,dte2,dte3;
    private static int rows;
    private static int columns;
    private static int columns1;
    private static int columns2;
    private static int columns3;
    private static ClassLibs classLibs;
    private static SharedPreferences printerDefault;


    private static String commandHexString = "1D763000";
//    private ContactListAdapter adapters;
//    public static String pbill, usrid, numberphone,ngid,datein,datesale,random,saletotal, dateend,etell;

    private static void connectoprinter(Activity activity) {
        try {
            printerDefault = activity.getSharedPreferences("printers", Context.MODE_PRIVATE);
            device = null;
            BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
            if (!bluetoothAdapter.isEnabled()) {
                Intent enableBluetooch = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                activity.startActivityForResult(enableBluetooch, 0);
            }
            Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();
            if (pairedDevices.size() > 0) {
                for (BluetoothDevice d : pairedDevices) {
                    if (d.getAddress().equals(printerDefault.getString("address", ""))) {
                        device = d;
                        break;
                    }
                }
            }
            if (device.getBondState() != BluetoothDevice.BOND_NONE) {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(UUID.fromString("00001101-0000-1000-8000-00805f9b34fb"));
                bluetoothSocket.connect();
                outputStream = bluetoothSocket.getOutputStream();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void disConnectoprinter() {
        try {
            bluetoothSocket.close();
            bluetoothSocket = null;
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static byte[] hexStringToBytes(String hexString) {
        if (hexString == null || hexString.equals("")) {
            return null;
        }
        hexString = hexString.toUpperCase();
        int length = hexString.length() / 2;
        char[] hexChars = hexString.toCharArray();
        byte[] d = new byte[length];
        for (int i = 0; i < length; i++) {
            int pos = i * 2;
            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));
        }
        return d;
    }

    private static byte charToByte(char c) {
        return (byte) "0123456789ABCDEF".indexOf(c);
    }

    private static byte[] sysCopy(List<byte[]> srcArrays) {
        int len = 0;
        for (byte[] srcArray : srcArrays) {
            len += srcArray.length;
        }
        byte[] destArray = new byte[len];
        int destLen = 0;
        for (byte[] srcArray : srcArrays) {
            System.arraycopy(srcArray, 0, destArray, destLen, srcArray.length);
            destLen += srcArray.length;
        }
        return destArray;
    }

    private static byte[] hexList2Byte(List<String> list) {
        List<byte[]> commandList = new ArrayList<byte[]>();

        for (String hexStr : list) {
            commandList.add(hexStringToBytes(hexStr));
        }
        byte[] bytes = sysCopy(commandList);
        return bytes;
    }

    private static List<String> binaryListToHexStringList(List<String> list) {
        List<String> hexList = new ArrayList<String>();
        for (String binaryStr : list) {
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < binaryStr.length(); i += 8) {
                String str = binaryStr.substring(i, i + 8);

                String hexString = myBinaryStrToHexString(str);
                sb.append(hexString);
            }
            hexList.add(sb.toString());
        }
        return hexList;

    }

    private static String myBinaryStrToHexString(String binaryStr) {
        String hex = "";
        String f4 = binaryStr.substring(0, 4);
        String b4 = binaryStr.substring(4, 8);
        for (int i = 0; i < binaryArray.length; i++) {
            if (f4.equals(binaryArray[i]))
                hex += hexStr.substring(i, i + 1);
        }
        for (int i = 0; i < binaryArray.length; i++) {
            if (b4.equals(binaryArray[i]))
                hex += hexStr.substring(i, i + 1);
        }

        return hex;
    }

    private static String[] checkNumber(String number) {
        String ch;
        String[] bytenumber = {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"};
        String[] bytes;
        for (int i = 0; i < number.length(); i++) {
            ch = number.substring(i, i + 1);
            bytes = new String[]{};
            switch (ch) {
                case "0":
                    bytes = zero;
                    break;
                case "1":
                    bytes = one;
                    break;
                case "2":
                    bytes = two;
                    break;
                case "3":
                    bytes = three;
                    break;
                case "4":
                    bytes = four;
                    break;
                case "5":
                    bytes = five;
                    break;
                case "6":
                    bytes = six;
                    break;
                case "7":
                    bytes = seven;
                    break;
                case "8":
                    bytes = eight;
                    break;
                case "9":
                    bytes = nine;
                    break;
                case "/":
                    bytes = slash;
                    break;
                case "-":
                    bytes = slash;
                    break;
                case ":":
                    bytes = colon;
                    break;
                case "=":
                    bytes = equalss;
                    break;
                case ",":
                    bytes = comna;
                    break;
                case ".":
                    bytes = comna;
                    break;
                case "A":
                    bytes = A;
                    break;
                case "B":
                    bytes = B;
                    break;
                case "C":
                    bytes = C;
                    break;
                case "D":
                    bytes = D;
                    break;
                case "E":
                    bytes = E;
                    break;
                case "F":
                    bytes = F;
                    break;
                case "I":
                    bytes = I;
                    break;
                case "J":
                    bytes = J;
                    break;
                case "K":
                    bytes = K;
                    break;
                case "L":
                    bytes = L;
                    break;
                case "M":
                    bytes = M;
                    break;
                case "N":
                    bytes = N;
                    break;
                case "O":
                    bytes = O;
                    break;
                case "P":
                    bytes = P;
                    break;
                case "Q":
                    bytes = Q;
                    break;
                default:
                    bytes = spacebar;
                    break;
            }
            for (int j = 0; j < 18; j++) {
                sb = new StringBuffer();
                if (bytenumber[j].equals("0")) {
                    sb.append(bytes[j]);
                } else {
                    sb.append(bytenumber[j]);
                    sb.insert(sb.length(), bytes[j]);
                }
                bytenumber[j] = bytenumber[j].replace(bytenumber[j], sb);
            }
        }
        return bytenumber;
    }

    private static String hexStr = "0123456789ABCDEF";

    private static String[] binaryArray = {
            "0000", "0001", "0010", "0011",
            "0100", "0101", "0110", "0111",
            "1000", "1001", "1010", "1011",
            "1100", "1101", "1110", "1111"};

    private static String[] bytesell = {""};


    public static String[] rdo1 = {"0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000110000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000110000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000111110000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000001111111100000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000011100001100000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000011100001100000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000011100001100000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000001110011111000000000000000000",
            "0001100001111110000011001111000011111110000111100001111000001111011111000011110000000000",
            "0011110011111111000111111111100111111111000111110011111100011111011110001111111000000000",
            "0011100111000011100111111001111110001111000011000011111110011111111110011100011100000000",
            "0011000011000001100011110001111111111111000011000011101110011110011111011000001100000000",
            "0011000000000001110001100001110111111111100011100011100110011000000111011000001110000000",
            "0011000001111001110001100001110000000001100011100000000110011000000111111000001110000000",
            "0011000011111101110001100001110011110001100011100000000110011000000111111000000110000000",
            "0011000111101101110001100001110111111001100011100000000110011000000111011000000110000000",
            "0011110111111111100111100001111111111111100011100000000110011001100111011111000110000000",
            "0011110011111111100111100001111111111111000011100000000110011111111110011111001100000000",
            "0011110011110111100111100001110111101111000011100000000110001111111100001111001100000000",
            "0000000000000000000000000000000000000000000011100000001110000000000000000000000000000000",
            "0000000000000000000000000000000000000000000011100011111100000000000000000000000000000000",
            "0000000000000000000000000000000000000000000011100011111100000000000000000000000000000000",
            "0000000000000000000000000000000000000011110011100000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000011110011000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000011111111000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000001111110000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000111100000000000000000000000000000000000000000000"};

    public static String[] rdo2 = {"0000000000000000000000000000001100000000000000000000000000000000000000000000000000000000",
            "0000011101100000111001100000001100000000000000000000000000000000000000000000000000000000",
            "0000111111100000111111100000001100000000000000000000000000000000000000000000000000000000",
            "0000111111100001111111000000001100000000000000000000000000000000000000000000000000000000",
            "0000000000000111111110000001111000000000000000000000000000000000000000000000000000000000",
            "0000000000000111111110000001111100000000000011111110000000000000000000000000000000000000",
            "0000000000001110000111000001101100000000000111111111000000000000000000000000000000000000",
            "0000000000000111111111100001111100000000000111100011100000000000000000000000000000000000",
            "0000000000000011111111000000110000000000000011000000000000000000000000000000000000000000",
            "0000000001110000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0011111111100011111110001110000010000111100011111110000111110000000000000000000000000000",
            "0111111111100111111111001111000011000111000111111111001111111000000000000000000000000000",
            "1111111111101111100011101111000011001110001110000111101111111100000000000000000000000000",
            "1110000001111111100011001110000011001110001110000111101111011100000000000000000000000000",
            "1110000001110111000111001110000011001110001111111111100110001100000000000000000000000000",
            "1110000001100000011110001100000011001110000111111111100000001100000000000000000000000000",
            "1110000001100011111100011100000011001110000000000011100000001100000000000000000000000000",
            "1110000001100111111110001100000111001111000110000011100000001100000000000000000000000000",
            "1110111101101110011111001110001110001111101111000111000000011100000000000000000000000000",
            "0111111111100111111111001111111100000111100111111110000000011100000000000000000000000000",
            "0011101111000011110011000011111000000011000011111100000000000000000000000000000000000000",
            "0000000000000000000011000000000000000000000000000000000000000000000000000000000000000000",
            "0001111110000000000011100000000000000000000000000000000000000000000000000000000000000000",
            "0001111110000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0001111110000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000011110000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000011110000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000001110000000000000000000000000000000000000000000000000000000000000000000000000000000"};

    public static String[] rdo3 = {"0000000000000000000000000000000110000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000110000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000110000000000000000000000000000000000000000000000000000000",
            "0001111100000000000000000000011100000000000000000000000000000000000000000000000000000000",
            "0011111110000000000000000000111100000000000000000000000000000000000000000000000000000000",
            "0111000111000000000000000001111100000000000000000000000000000000000000000000000000000000",
            "0111000011000000000000000001111100000000000000000000000000000000000000000000000000000000",
            "0110000011000000000000000000111100000000000000000000000000000000000000000000000000000000",
            "0011100110000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0111100111000110000000000110000010000011111000000011111000011100111100000000000000000000",
            "1111100011101111000011101111000011000111111110000111111100011111111110000000000000000000",
            "1111100001101111000001101111000011001110001111001100001111011111100111000000000000000000",
            "0111100001100111100001101111000011101100000111111100001111001111000111000000000000000000",
            "0011000001100011100001100110000011101100001111111100001111000110000011000000000000000000",
            "0110000001100011100001101110000011000111111111001111111111000110000011000000000000000000",
            "1110000001100011100001101100000011000011111111000111111111000110000011000000000000000000",
            "1110000001100011100001101100000011000000000011000000000011000110000011000000000000000000",
            "1110000011100011100011101110000111001110000111001110000111011110000011000000000000000000",
            "0111111111000111111111001111111110001111111110001111111110011110000111000000000000000000",
            "0011111110001111111111000111111100000111111110001111111100011110000111000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"};



    private static String[] zero = {
            "00001111110000",
            "00011111111000",
            "00111100111100",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "00111100111100",
            "00011111111000",
            "00001111110000"
    };

    private static String[] one = {
            "0000000111000",
            "0000001111000",
            "0000011111000",
            "0011111111000",
            "0011111111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000000111000",
            "0000111111110",
            "0000111111110"
    };
    private static String[] two = {
            "00001111110000",
            "00011111111100",
            "01110000001110",
            "01100000001110",
            "00000000001110",
            "00000000011100",
            "00000000011100",
            "00000000111000",
            "00000001110000",
            "00000011100000",
            "00000111000000",
            "00001110000000",
            "00011100000000",
            "00011100000000",
            "00111000000000",
            "00111000000000",
            "01111111111110",
            "01111111111110"
    };

    private static String[] three = {
            "00011111110000",
            "00111111111100",
            "01100000001110",
            "01000000001110",
            "00000000001110",
            "00000000011100",
            "00000000111000",
            "00011111100000",
            "00011111110000",
            "00000000111000",
            "00000000011100",
            "00000000001110",
            "00000000001110",
            "00000000001110",
            "01100000011100",
            "01110000111100",
            "00011111111000",
            "00001111100000"
    };

    private static String[] four = {
            "00000000011000",
            "00000000111000",
            "00000000111000",
            "00000001111000",
            "00000011111000",
            "00000011111000",
            "00000111111000",
            "00001100011000",
            "00001100011000",
            "00011000011000",
            "00110000011000",
            "01110000011000",
            "11111111111111",
            "11111111111111",
            "00000000011000",
            "00000000011000",
            "00000000011000",
            "00000001111100"
    };

    private static String[] five = {
            "01111111111110",
            "01111111111110",
            "01110000000000",
            "01110000000000",
            "01110000000000",
            "01110000000000",
            "01110000000000",
            "01111111110000",
            "01111111111000",
            "00000000011100",
            "00000000001110",
            "00000000001110",
            "00000000001110",
            "00000000001110",
            "00000000001110",
            "01100000011100",
            "00111111111000",
            "00001111110000"
    };
    private static String[] six = {
            "00001111111000",
            "00011111111000",
            "00111000000000",
            "01110000000000",
            "01110000000000",
            "01110000000000",
            "01110000000000",
            "01111111110000",
            "01111111111100",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "01110000001110",
            "00111000011100",
            "00011111111000",
            "00001111100000"
    };

    public static String[] seven = {
            "01111111111110",
            "01111111111110",
            "00000000001110",
            "00000000011100",
            "00000000011000",
            "00000000111000",
            "00000000110000",
            "00000001110000",
            "00000011100000",
            "00000011100000",
            "00000011000000",
            "00000111000000",
            "00001110000000",
            "00001110000000",
            "00011100000000",
            "00111000000000",
            "01110000000000",
            "01110000000000"
    };

    private static String[] eight = {
            "00001111110000",
            "00111111111100",
            "01110000001110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "00111000011100",
            "00011111111000",
            "00011111111000",
            "00111000011100",
            "00110000001100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "00111000011100",
            "00011111111000",
            "00001111110000"
    };

    private static String[] nine = {
            "00001111110000",
            "00011111111000",
            "01110000001110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01110000000110",
            "01110000000110",
            "00111000001110",
            "00011111111110",
            "00000000111110",
            "00000000000110",
            "00000000000110",
            "00000000001110",
            "01000000001100",
            "00111111111000",
            "00011111110000"
    };

    private static String[] spacebar = {
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000"
    };

    private static String[] equalss = {
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000",
            "011111111111",
            "011111111111",
            "000000000000",
            "000000000000",
            "000000000000",
            "011111111111",
            "011111111111",
            "000000000000",
            "000000000000",
            "000000000000",
            "000000000000"
    };

    private static String[] slash = {
            "00000110",
            "00001110",
            "00001100",
            "00001100",
            "00001100",
            "00001100",
            "00011100",
            "00011000",
            "00011000",
            "00111000",
            "00111000",
            "00110000",
            "00111000",
            "00110000",
            "01110000",
            "01110000",
            "01100000",
            "01100000"
    };

    private static String[] comna = {
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0000000",
            "0011100",
            "0011100",
            "0011100",
            "0011000",
            "0011000",
            "0010000"
    };

    private static String[] colon = {
            "0000",
            "0000",
            "0000",
            "0000",
            "0000",
            "0000",
            "0110",
            "0110",
            "0000",
            "0000",
            "0000",
            "0000",
            "0000",
            "0110",
            "0110",
            "0000",
            "0000",
            "0000"
    };
    private static String[] A = {
            "00000011000000",
            "00001100110000",
            "00001100110000",
            "00001100110000",
            "00011000011000",
            "00011000011000",
            "00011000011000",
            "00110000001100",
            "00110000001100",
            "00110000001100",
            "00110000001100",
            "01100000000110",
            "01100000000110",
            "01111111111110",
            "01111111111110",
            "01100000000110",
            "01100000000110",
            "01000000000010"
    };

    private static String[] B = {
            "01111111100000",
            "01100000011000",
            "01100000001100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000001100",
            "01100000011000",
            "01111111111000",
            "01100000011000",
            "01100000001100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000001100",
            "01100000011000",
            "01111111100000"
    };
    private static String[] C = {
            "00011111111000",
            "00111111111100",
            "00110000000110",
            "01100000000010",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000010",
            "00110000000110",
            "00111111111100",
            "00011111111000",
    };
    private static String[] D = {
            "11111111110000",
            "11111111111100",
            "01100000001100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000001100",
            "11111111111000",
            "11111111110000",
    };

    private static String[] E = {
            "01111111111110",
            "01111111111110",
            "01100000000110",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01111111110000",
            "01111111110000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000110",
            "01111111111110",
            "01111111111110",
    };
    private static String[] F = {
            "01111111111110",
            "01111111111110",
            "01100000000110",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01111111110000",
            "01111111110000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "11111000000000",
    };
    private static String[] I = {
            "01111111111110",
            "01111111111110",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "01111111111110",
            "01111111111110",
    };
    private static String[] J = {
            "01111111111110",
            "01111111111110",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "00000001100000",
            "11100011000000",
            "01111110000000",
            "00111100000000",
    };
    private static String[] K = {
            "11110000000110",
            "01100000000110",
            "01100000001100",
            "01100000011000",
            "01100000110000",
            "01100001100000",
            "01100011000000",
            "01100110000000",
            "01111000000000",
            "01111110000000",
            "01100011000000",
            "01100001100000",
            "01100000110000",
            "01100000011000",
            "01100000001100",
            "01100000000110",
            "01100000000110",
            "11110000000110",
    };

    private static String[] L = {
            "11111000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01110000000001",
            "11111111111111",
            "11111111111111",
    };
    private static String[] M = {
            "01110000001110",
            "01111000011110",
            "01101100110110",
            "01101100110110",
            "01100111100110",
            "01100111000110",
            "01100011000110",
            "01100011000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "11110000001111",
    };
    private static String[] N = {
            "01110000000110",
            "01111000000110",
            "01101100000110",
            "01101100000110",
            "01101100000110",
            "01100110000110",
            "01100110000110",
            "01100110000110",
            "01100011000110",
            "01100011000110",
            "01100001100110",
            "01100001100110",
            "01100001100110",
            "01100000110110",
            "01100000110110",
            "01100000110110",
            "01100000011110",
            "01100000001110",
    };
    private static String[] O = {
            "00001111110000",
            "00011111111000",
            "00110000001100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "011000000000110",
            "01100000000110",
            "00110000001100",
            "00011111111000",
            "00001111110000"
    };
    private static String[] P = {
            "01111111111000",
            "01111111111100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000001100",
            "01111111111000",
            "01111111100000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "11110000000000",
    };
    private static String[] Q = {
            "00001111110000",
            "00011111111000",
            "00110000001100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "00110000001100",
            "00111111111100",
            "00011111111000",
            "00000011000000",
            "00000001100000",
            "00000000110000",
            "00000000011000",
            "00000000001100",
    };
    /**
    private static String[] R = {
            "01111111111000",
            "01111111111100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000001100",
            "01111111111000",
            "01111111100000",
            "01100000110000",
            "01100000011000",
            "01100000001100",
            "01100000001100",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "11110000000011",
    };

    private static String[] S = {
            "00011111111000",
            "00111111111100",
            "01110000000110",
            "01100000000000",
            "01100000000000",
            "01100000000000",
            "01111000000000",
            "00011110000000",
            "00000111110000",
            "00000000011100",
            "00000000000110",
            "00000000000110",
            "00000000000110",
            "00000000000110",
            "00000000000110",
            "01100000001100",
            "00111111111000",
            "00011111110000"
    };

    private static String[] T = {
            "11111111111111",
            "11111111111111",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000111100000",
            "00001111110000",
    };

    private static String[] U = {
            "11110000001111",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "00110000001100",
            "00110000001100",
            "00011000011000",
            "00011111111000",
    };

    private static String[] V = {
            "11100000000111",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "00110000001100",
            "00110000001100",
            "00110000001100",
            "00011000001100",
            "00011000011000",
            "00011100011000",
            "00001100110000",
            "00001100110000",
            "00001101100000",
            "00000011000000",
    };

    private static String[] W = {
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100000000110",
            "01100011000110",
            "01100011000110",
            "01101100110110",
            "01101100110110",
            "01101100110110",
            "01101100101110",
            "01101000010110",
            "01111000011110",
            "01100000000110",
    };

    private static String[] X = {
            "11000000000011",
            "01100000000110",
            "01100000000110",
            "00110000001100",
            "00011000011000",
            "00011000110000",
            "00001100110000",
            "00001101100000",
            "00000111000000",
            "00000011100000",
            "00000110110000",
            "00001100110000",
            "00001100011000",
            "00011000011000",
            "00110000001100",
            "00110000000110",
            "01100000000110",
            "11000000000011",
    };

    private static String[] Y = {
            "11000000000011",
            "11000000000011",
            "01100000000110",
            "01100000000110",
            "00110000001100",
            "00110000001100",
            "00011000011000",
            "00001100110000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00000011000000",
            "00001111110000",
    };

    private static String[] Z = {
            "11111111111111",
            "11111111111111",
            "01100000000110",
            "00000000001100",
            "00000000011100",
            "00000000011000",
            "00000000110000",
            "00000000110000",
            "00000001100000",
            "00000011000000",
            "00000110000000",
            "00001100000000",
            "00011100000000",
            "00011000000000",
            "00110000000000",
            "01100000000110",
            "11111111111111",
            "11111111111111",
    };
**/
    public static void printcancelbillTest(Bitmap bmp, Activity activity, ArrayList<String> list, int rdo) throws IOException {
        try {
            if (list.size() < 24) {
                int k = list.size();
                for (int i = 0; i < (24 - k); i++) {
                    if (list.size() % 2 == 0) {
                        list.add("== ");
                    } else {
                        list.add("0");
                    }
                }
            }
            connectoprinter(activity);
            List<ArrayList<String>> allbill = new ArrayList<ArrayList<String>>();
            ArrayList<String> listimage = new ArrayList<String>();
            int bmpWidth = bmp.getWidth();
            int bmpHeight = bmp.getHeight();
            StringBuffer sb;
            int bitLen = bmpWidth / 8;
            int zeroCount = bmpWidth % 8;
            String zeroStr = "";
            if (zeroCount > 0) {
                bitLen = bmpWidth / 8 + 1;
                for (int i = 0; i < (8 - zeroCount); i++) {
                    zeroStr = zeroStr + "0";
                }
            }
            int k = 254;
            for (int i = 0; i < bmpHeight; i++) {
                sb = new StringBuffer();
                for (int j = 0; j < bmpWidth; j++) {
                    int color = bmp.getPixel(j, i);

                    int r = (color >> 16) & 0xff;
                    int g = (color >> 8) & 0xff;
                    int b = color & 0xff;

                    // if color close to white，bit='0', else bit='1'
                    if (r > 160 && g > 160 && b > 160)
                        sb.append("0");
                    else
                        sb.append("1");
                }
                if (zeroCount > 0) {
                    sb.append(zeroStr);
                }
                listimage.add(sb.toString());
                if (i == k) {
                    allbill.add(listimage);
                    listimage = new ArrayList<String>();
                    k += 255;
                }
            }

            if (listimage.size() > 0) {
                allbill.add(listimage);
            }
            List<ArrayList<String>> printfile = new ArrayList<ArrayList<String>>();
            int l = 0;
            for (ArrayList<String> img : allbill) {
                if (l == 0) {
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(classLibs.ngod1);
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(classLibs.datein1.toString());
                    rows = 47;
                    columns = 56;
                    columns1 = 256;
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        img.set(rows + i, sb.toString());
                    }

                    bytenumber = new String[]{};
                    bytenumber = checkNumber("000121111");
                    rows = 78;
                    columns = 70;
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        img.set(rows + i, sb.toString());
                    }

                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(0));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(1));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(12));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(13));
                    rows = 164;
//                columns = 8;
//                columns1 = 118;
//                columns2 = 215;
//                columns3 = 322;
                    columns = 64 - bytenumber[0].length();
                    columns1 = 170 - bytenumber1[0].length();
                    columns2 = 264 - bytenumber2[0].length();
                    columns3 = 370 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());

                    }

                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(2));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(3));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(14));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(15));
                    rows = 196;
//                columns = 8;
//                columns1 = 118;
//                columns2 = 215;
//                columns3 = 322;
                    columns = 64 - bytenumber[0].length();
                    columns1 = 170 - bytenumber1[0].length();
                    columns2 = 264 - bytenumber2[0].length();
                    columns3 = 370 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());

                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(4));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(5));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(16));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(17));
                    rows = 228;
//                columns = 8;
//                columns1 = 118;
//                columns2 = 215;
//                columns3 = 322;
                    columns = 64 - bytenumber[0].length();
                    columns1 = 170 - bytenumber1[0].length();
                    columns2 = 264 - bytenumber2[0].length();
                    columns3 = 370 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());
                    }
                } else if (l == 1) {
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(6));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(7));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(18));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(19));
                    rows = 5;
//                columns = 8;
//                columns1 = 118;
//                columns2 = 215;
//                columns3 = 322;
                    columns = 64 - bytenumber[0].length();
                    columns1 = 170 - bytenumber1[0].length();
                    columns2 = 264 - bytenumber2[0].length();
                    columns3 = 370 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());

                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(8));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(9));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(20));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(21));
                    rows = 37;
//                columns = 8;
//                columns1 = 118;
//                columns2 = 215;
//                columns3 = 322;
                    columns = 64 - bytenumber[0].length();
                    columns1 = 170 - bytenumber1[0].length();
                    columns2 = 264 - bytenumber2[0].length();
                    columns3 = 370 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());
                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(10));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(11));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(22));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(23));
                    rows = 69;
//                columns = 8;
//                columns1 = 118;
//                columns2 = 215;
//                columns3 = 322;
                    columns = 64 - bytenumber[0].length();
                    columns1 = 170 - bytenumber1[0].length();
                    columns2 = 264 - bytenumber2[0].length();
                    columns3 = 370 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());
                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber("11001");
                    rows = 112;
                    columns = 70;
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        img.set(rows + i, sb.toString());
                    }
                } else if (l == 2) {
                    bytenumber = new String[]{};
                    if (rdo == 1) {
                        bytenumber = rdo1;
                    } else if (rdo == 2) {
                        bytenumber = rdo2;
                    } else if (rdo == 3) {
                        bytenumber = rdo3;
                    }
                    rows = 45;
                    columns = 186;
                    for (int i = 0; i < 28; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        img.set(rows + i, sb.toString());
                    }
                }

                List<String>bmpHexList = binaryListToHexStringList(img);
//                String commandHexString = "1D763000";
                String widthHexString = Integer
                        .toHexString(bmpWidth % 8 == 0 ? bmpWidth / 8
                                : (bmpWidth / 8 + 1));
                if (widthHexString.length() > 2) {
                    Log.e("decodeBitmap error", " width is too large");
                    return;
                } else if (widthHexString.length() == 1) {
                    widthHexString = "0" + widthHexString;
                }
                widthHexString = widthHexString + "00";

                String heightHexString = Integer.toHexString(img.size());
                if (heightHexString.length() > 2) {
                    Log.e("decodeBitmap error", " height is too large");
                    return;
                } else if (heightHexString.length() == 1) {
                    heightHexString = "0" + heightHexString;
                }
                heightHexString = heightHexString + "00";

                ArrayList<String> commandList = new ArrayList<String>();
                commandList.add(commandHexString + widthHexString + heightHexString);
                commandList.addAll(bmpHexList);

                printfile.add(commandList);
//            outputStream.write(hexList2Byte(commandList));
                l += 1;
            }
            for (ArrayList<String> printss : printfile) {
                outputStream.write(hexList2Byte(printss));
            }
            outputStream.write(10);
            outputStream.write(10);
            outputStream.write(10);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void printcancelbill(Bitmap bmp, Activity activity, String billNumber, ArrayList<String> list, int rdo) throws IOException {
        try {
            if (list.size() < 24) {
                int k = list.size();
                for (int i = 0; i < (24 - k); i++) {
                    if (list.size() % 2 == 0) {
                        list.add("== ");
                    } else {
                        list.add("0");
                    }
                }
            }
            connectoprinter(activity);
            List<ArrayList<String>> allbill = new ArrayList<ArrayList<String>>();
            ArrayList<String> listimage = new ArrayList<String>();
            int bmpWidth = bmp.getWidth();
            int bmpHeight = bmp.getHeight();
            StringBuffer sb;
            int bitLen = bmpWidth / 8;
            int zeroCount = bmpWidth % 8;
            String zeroStr = "";
            if (zeroCount > 0) {
                bitLen = bmpWidth / 8 + 1;
                for (int i = 0; i < (8 - zeroCount); i++) {
                    zeroStr = zeroStr + "0";
                }
            }
            int k = 254;
            for (int i = 0; i < bmpHeight; i++) {
                sb = new StringBuffer();
                for (int j = 0; j < bmpWidth; j++) {
                    int color = bmp.getPixel(j, i);

                    int r = (color >> 16) & 0xff;
                    int g = (color >> 8) & 0xff;
                    int b = color & 0xff;

                    // if color close to white，bit='0', else bit='1'
                    if (r > 160 && g > 160 && b > 160)
                        sb.append("0");
                    else
                        sb.append("1");
                }
                if (zeroCount > 0) {
                    sb.append(zeroStr);
                }
                listimage.add(sb.toString());
                if (i == k) {
                    allbill.add(listimage);
                    listimage = new ArrayList<String>();
                    k += 255;
                }
            }

            if (listimage.size() > 0) {
                allbill.add(listimage);
            }
            List<ArrayList<String>> printfile = new ArrayList<ArrayList<String>>();
            int l = 0;
            for (ArrayList<String> img : allbill) {
                if (l == 0) {
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(classLibs.ngod);
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(classLibs.datein2.toString());
                    rows = 47;
                    columns = 56;
                   // columns = 44;
                    columns1 = 256;
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        img.set(rows + i, sb.toString());
                    }

                    bytenumber = new String[]{};
                    bytenumber = checkNumber(billNumber);
                    rows = 78;
                    columns = 70;
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        img.set(rows + i, sb.toString());
                    }

                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(0));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(1));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(12));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(13));
                    rows = 164;


                    if(device.getName().equals("RPP02N") || device.getName().equals("RPP-02")){
                        columns = 68 - bytenumber[0].length();
                        columns1 = 179 - bytenumber1[0].length();
                        columns2 = 280 - bytenumber2[0].length();
                        columns3 = 381 - bytenumber3[0].length();
                    }else {
                        columns = 68 - bytenumber[0].length();
                        columns1 = 179 - bytenumber1[0].length();
                        columns2 = 276 - bytenumber2[0].length();
                        columns3 = 378 - bytenumber3[0].length();
                    }


                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());

                    }

                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(2));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(3));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(14));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(15));
                    rows = 196;

                  //  columns = 68 - bytenumber[0].length();
                  //  columns1 = 179 - bytenumber1[0].length();
                  //  columns2 = 280 - bytenumber2[0].length();
                  //  columns3 = 381 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());

                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(4));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(5));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(16));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(17));
                    rows = 228;

               //     columns = 68 - bytenumber[0].length();
               //     columns1 = 179 - bytenumber1[0].length();
               //     columns2 = 280 - bytenumber2[0].length();
                //    columns3 = 381 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());
                    }
                } else if (l == 1) {
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(6));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(7));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(18));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(19));
                    rows = 5;

              //      columns = 68 - bytenumber[0].length();
              //      columns1 = 179 - bytenumber1[0].length();
              //      columns2 = 280 - bytenumber2[0].length();
               //     columns3 = 381 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());

                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(8));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(9));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(20));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(21));
                    rows = 37;

                 //   columns = 68 - bytenumber[0].length();
                 //   columns1 = 179 - bytenumber1[0].length();
                 //   columns2 = 280 - bytenumber2[0].length();
                 //   columns3 = 381 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());
                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(list.get(10));
                    bytenumber1 = new String[]{};
                    bytenumber1 = checkNumber(list.get(11));
                    bytenumber2 = new String[]{};
                    bytenumber2 = checkNumber(list.get(22));
                    bytenumber3 = new String[]{};
                    bytenumber3 = checkNumber(list.get(23));
                    rows = 69;

                //    columns = 68 - bytenumber[0].length();
                //    columns1 = 179 - bytenumber1[0].length();
                //    columns2 = 280 - bytenumber2[0].length();
                //    columns3 = 381 - bytenumber3[0].length();
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        sb.delete(columns1, columns1 + bytenumber1[i].length());
                        sb.insert(columns1, bytenumber1[i]);
                        sb.delete(columns2, columns2 + bytenumber2[i].length());
                        sb.insert(columns2, bytenumber2[i]);
                        sb.delete(columns3, columns3 + bytenumber3[i].length());
                        sb.insert(columns3, bytenumber3[i]);
                        img.set(rows + i, sb.toString());
                    }
                    bytenumber = new String[]{};
                    bytenumber = checkNumber(username);
                    rows = 112;
                    columns = 70;
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        img.set(rows + i, sb.toString());
                    }
                } else if (l == 2) {
                    bytenumber = new String[]{};
                    if (rdo == 1) {
                        bytenumber = rdo1;
                    } else if (rdo == 2) {
                        bytenumber = rdo2;
                    } else if (rdo == 3) {
                        bytenumber = rdo3;
                    }
                    rows = 45;
                    columns = 186;
                    for (int i = 0; i < 28; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(rows + i));
                        sb.delete(columns, columns + bytenumber[i].length());
                        sb.insert(columns, bytenumber[i]);
                        img.set(rows + i, sb.toString());
                    }
                }

                List<String>bmpHexList = binaryListToHexStringList(img);
//                String commandHexString = "1D763000";
                String widthHexString = Integer
                        .toHexString(bmpWidth % 8 == 0 ? bmpWidth / 8
                                : (bmpWidth / 8 + 1));
                if (widthHexString.length() > 2) {
                    Log.e("decodeBitmap error", " width is too large");
                    return;
                } else if (widthHexString.length() == 1) {
                    widthHexString = "0" + widthHexString;
                }
                widthHexString = widthHexString + "00";

                String heightHexString = Integer.toHexString(img.size());
                if (heightHexString.length() > 2) {
                    Log.e("decodeBitmap error", " height is too large");
                    return;
                } else if (heightHexString.length() == 1) {
                    heightHexString = "0" + heightHexString;
                }
                heightHexString = heightHexString + "00";

                ArrayList<String> commandList = new ArrayList<String>();
                commandList.add(commandHexString + widthHexString + heightHexString);
                commandList.addAll(bmpHexList);

                printfile.add(commandList);
//            outputStream.write(hexList2Byte(commandList));
                l += 1;
            }
            for (ArrayList<String> printss : printfile) {
                outputStream.write(hexList2Byte(printss));
            }
            outputStream.write(10);
            outputStream.write(10);
            outputStream.write(10);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void printsalebill(Bitmap bmp, Activity activity, ArrayList<String> list) {
        try {

            if (list.size() < 24) {
                int k = list.size();
                for (int i = 0; i < (24 - k); i++) {
                    if (list.size() % 2 == 0) {
                        list.add(" ==");
                    } else {
                        list.add("0");
                    }
                }
            }
            connectoprinter(activity);
            List<ArrayList<String>> allbill = new ArrayList<ArrayList<String>>();
            ArrayList<String> listimage = new ArrayList<String>();

//            Bitmap bmp = Bitmap.createScaledBitmap(obmp, 384, 643, false);
            int bmpWidth = bmp.getWidth();
            int bmpHeight = bmp.getHeight();
            StringBuffer sb;
            int bitLen = bmpWidth / 8;
            int zeroCount = bmpWidth % 8;
            String zeroStr = "";
            if (zeroCount > 0) {
                bitLen = bmpWidth / 8 + 1;
                for (int i = 0; i < (8 - zeroCount); i++) {
                    zeroStr = zeroStr + "0";
                }
            }
            int k = 254;
            for (int i = 0; i < bmpHeight; i++) {
                sb = new StringBuffer();
                for (int j = 0; j < bmpWidth; j++) {
                    int color = bmp.getPixel(j, i);

                    int r = (color >> 16) & 0xff;
                    int g = (color >> 8) & 0xff;
                    int b = color & 0xff;

                    // if color close to white，bit='0', else bit='1'
                    if (r > 160 && g > 160 && b > 160)
                        sb.append("0");
                    else
                        sb.append("1");
                }
                if (zeroCount > 0) {
                    sb.append(zeroStr);
                }
                listimage.add(sb.toString());
                if (i == k) {
                    allbill.add(listimage);
                    listimage = new ArrayList<String>();
                    k += 255;
                }
            }

            if (listimage.size() > 0) {
                allbill.add(listimage);
            }

            List<ArrayList<String>> printfile = new ArrayList<ArrayList<String>>();
            int l = 0;
            for (ArrayList<String> img : allbill) {
                if (l == 0) {
                    String[] salebill = checkNumber(SalAuto_id);
                    String[] user = checkNumber(username);
                    String[] devicename = checkNumber(device_id);
                    String[] ngname = checkNumber(Ngname);
                    String[] date = checkNumber(String.valueOf(datein));

                    for (int i = 0; i < 18; i++) {

//                        ເລກບິນ
                        sb = new StringBuffer();
                        sb.append(img.get(143 + i));
                        sb.delete(70, 70 + salebill[i].length());
                        sb.insert(70, salebill[i]);
                        img.set(143 + i, sb.toString());

//                        ຜູ້ຂາຍ
                        sb = new StringBuffer();
                        sb.append(img.get(175 + i));
                        sb.delete(65, 65 + user[i].length());
                        sb.insert(65, user[i]);
//                        ເລກເຄື່ອງ
                        sb.delete(282, 282 + devicename[i].length());
                        sb.insert(282, devicename[i]);
                        img.set(175 + i, sb.toString());

//                        ງວດ
                        sb = new StringBuffer();
                        sb.append(img.get(207 + i));
                        sb.delete(56, 56 + ngname[i].length());
                        sb.insert(56, ngname[i]);
//                        ອອກຄັ້ງວັນທີ
                        sb.delete(250, 250 + date[i].length());
                        sb.insert(250, date[i]);
                        img.set(207 + i, sb.toString());
                    }
                } else if (l == 1) {

                    String[] l0 = checkNumber(list.get(0));
                    String[] l1 = checkNumber(list.get(1));
                    String[] l2 = checkNumber(list.get(2));
                    String[] l3 = checkNumber(list.get(3));
                    String[] l4 = checkNumber(list.get(4));
                    String[] l5 = checkNumber(list.get(5));
                    String[] l6 = checkNumber(list.get(6));
                    String[] l7 = checkNumber(list.get(7));
                    String[] l8 = checkNumber(list.get(8));
                    String[] l9 = checkNumber(list.get(9));
                    String[] l10 = checkNumber(list.get(10));
                    String[] l11 = checkNumber(list.get(11));
                    String[] l12 = checkNumber(list.get(12));
                    String[] l13 = checkNumber(list.get(13));
                    String[] l14 = checkNumber(list.get(14));
                    String[] l15 = checkNumber(list.get(15));
                    String[] l16 = checkNumber(list.get(16));
                    String[] l17 = checkNumber(list.get(17));
                    String[] l18 = checkNumber(list.get(18));
                    String[] l19 = checkNumber(list.get(19));
                    String[] l20 = checkNumber(list.get(20));
                    String[] l21 = checkNumber(list.get(21));
                    String[] l22 = checkNumber(list.get(22));
                    String[] l23 = checkNumber(list.get(23));

                    int columns1 ;
                    int columns2 ;
                    int columns3 ;
                    //  int columns4 = 382;
                    int columns4 ;
                    if(device.getName().equals("RPP02N") || device.getName().equals("RPP-02")){
                         columns1 = 68;
                         columns2 = 179;
                         columns3 = 265;
                        //  int columns4 = 382;
                         columns4 = 382;
                    }else {
                         columns1 = 68;
                         columns2 = 179;
                         columns3 = 265;
                        //  int columns4 = 382;
                         columns4 = 377;
                    }

                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(42 + i));
                       /** if (l0[i].length() <= 50) {
                            columns1 = 68;
                        } else {
                            columns1 = 66;
                        }
                        **/
                        sb.delete(columns1 - l0[i].length(), columns1);
                        sb.insert(columns1 - l0[i].length(), l0[i]);
                        sb.delete(columns2 - l1[i].length(), columns2);
                        sb.insert(columns2 - l1[i].length(), l1[i]);
                      /**  if (l12[i].length() <= 40) {
                            columns3 = 276;
                        } else {
                            columns3 = 280;;
                        }**/
                        sb.delete(columns3 - l12[i].length(), columns3);
                        sb.insert(columns3 - l12[i].length(), l12[i]);
                        sb.delete(columns4 - l13[i].length(), columns4);
                        sb.insert(columns4 - l13[i].length(), l13[i]);
                        img.set(42 + i, sb.toString());
                    }
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(85 + i));
                       /** if (l2[i].length() <= 50) {
                            columns1 = 68;
                        } else {
                            columns1 = 66;
                        }**/
                        sb.delete(columns1 - l2[i].length(), columns1);
                        sb.insert(columns1 - l2[i].length(), l2[i]);
                        sb.delete(columns2 - l3[i].length(), columns2);
                        sb.insert(columns2 - l3[i].length(), l3[i]);
                     /**   if (l14[i].length() <= 40) {
                            columns3 = 276;
                        } else {
                            columns3 = 280;;
                        }**/
                        sb.delete(columns3 - l14[i].length(), columns3);
                        sb.insert(columns3 - l14[i].length(), l14[i]);
                        sb.delete(columns4 - l15[i].length(), columns4);
                        sb.insert(columns4 - l15[i].length(), l15[i]);
                        img.set(85 + i, sb.toString());


                    }
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(125 + i));
                      /**  if (l4[i].length() <= 30) {
                            columns1 = 64;
                        } else {
                            columns1 = 68;
                        }**/
                        sb.delete(columns1 - l4[i].length(), columns1);
                        sb.insert(columns1 - l4[i].length(), l4[i]);
                        sb.delete(columns2 - l5[i].length(), columns2);
                        sb.insert(columns2 - l5[i].length(), l5[i]);
                      /**  if (l16[i].length() <= 30) {
                            columns3 = 276;
                        } else {
                            columns3 = 280;;
                        }**/
                        sb.delete(columns3 - l16[i].length(), columns3);
                        sb.insert(columns3 - l16[i].length(), l16[i]);
                        sb.delete(columns4 - l17[i].length(), columns4);
                        sb.insert(columns4 - l17[i].length(), l17[i]);
                        img.set(125 + i, sb.toString());

                    }
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(168 + i));
                      /**  if (l6[i].length() <= 30) {
                            columns1 = 64;
                        } else {
                            columns1 = 68;
                        }**/
                        sb.delete(columns1 - l6[i].length(), columns1);
                        sb.insert(columns1 - l6[i].length(), l6[i]);
                        sb.delete(columns2 - l7[i].length(), columns2);
                        sb.insert(columns2 - l7[i].length(), l7[i]);
                      /**  if (l18[i].length() <= 30) {
                            columns3 = 276;
                        } else {
                            columns3 = 280;;
                        }**/
                        sb.delete(columns3 - l18[i].length(), columns3);
                        sb.insert(columns3 - l18[i].length(), l18[i]);
                        sb.delete(columns4 - l19[i].length(), columns4);
                        sb.insert(columns4 - l19[i].length(), l19[i]);
                        img.set(168 + i, sb.toString());

                    }
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        sb.append(img.get(206 + i));
                     /**   if (l8[i].length() <= 30) {
                            columns1 = 64;
                        } else {
                            columns1 = 68;
                        }**/
                        sb.delete(columns1 - l8[i].length(), columns1);
                        sb.insert(columns1 - l8[i].length(), l8[i]);
                        sb.delete(columns2 - l9[i].length(), columns2);
                        sb.insert(columns2 - l9[i].length(), l9[i]);

                      /**  if (l20[i].length() <= 30) {
                        columns3 = 276;
                        } else {
                            columns3 = 280;;
                        }**/
                        sb.delete(columns3 - l20[i].length(), columns3);
                        sb.insert(columns3 - l20[i].length(), l20[i]);
                        sb.delete(columns4 - l21[i].length(), columns4);
                        sb.insert(columns4 - l21[i].length(), l21[i]);
                        img.set(206 + i, sb.toString());

                    }
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();
                        // sb.append(img.get(212 + i));
                        sb.append(img.get(237 + i));
                     /**   if (l10[i].length() <= 30) {
                            columns1 = 64;
                        } else {
                            columns1 = 68;
                        }**/
                        sb.delete(columns1 - l10[i].length(), columns1);
                        sb.insert(columns1 - l10[i].length(), l10[i]);
                        sb.delete(columns2 - l11[i].length(), columns2);
                        sb.insert(columns2 - l11[i].length(), l11[i]);
                      /**  if (l22[i].length() <= 30) {
                            columns3 = 276;
                        } else {
                            columns3 = 280;;
                        }**/
                        sb.delete(columns3 - l22[i].length(), columns3);
                        sb.insert(columns3 - l22[i].length(), l22[i]);
                        sb.delete(columns4 - l23[i].length(), columns4);
                        sb.insert(columns4 - l23[i].length(), l23[i]);
                        // img.set(212 + i, sb.toString());
                        img.set(237 + i, sb.toString());
                    }
                } else if (l == 2) {
                    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

                    String[] Yea = checkNumber(datesale.substring(0, 4));
                    String[] Mon = checkNumber(datesale.substring(4, 8));
                    String[] date = checkNumber(datesale.substring(8, 10));
                    String[] Tim = checkNumber(datesale.substring(11, 19));

                    String[] randoms = checkNumber(random);
                    String[] total = checkNumber(saletotal);
                    String[] datee = checkNumber(dateend.substring(0, 10));
                    String[] tel = checkNumber(phone);
                    String[] version = checkNumber(versions);
                    for (int i = 0; i < 18; i++) {
                        sb = new StringBuffer();

//                        ວັນທີຊື້
                        sb.append(img.get(50 + i));
                        sb.delete(68, 68 + date[i].length());
                        sb.insert(68, date[i]);

                        sb.delete(95, 95 + Mon[i].length());
                        sb.insert(95, Mon[i]);

                        sb.delete(140, 140 + Yea[i].length());
                        sb.insert(140, Yea[i]);

                        sb.delete(205, 205 + Tim[i].length());
                        sb.insert(205, Tim[i]);
                        img.set(50 + i, sb.toString());

//                        ເລກແລນດອມ
                        sb = new StringBuffer();
                        String r = "";
                        for (int j = 0; j < randoms[i].length(); j++) {
                            if (randoms[i].toString().substring(j, j + 1).equals("0")) {
                                r += "1";
                            } else {
                                r += "0";
                            }
                        }
                        sb.append(img.get(85 + i));
                        sb.delete(18, 18 + r.length());
                        sb.insert(18, r);
//                        ລວມ
                        sb.delete(372 - total[i].length(), 372);
                        sb.insert(372 - total[i].length(), total[i]);
                        img.set(85 + i, sb.toString());

//                        ວັນທີຫມົດກຳໜົດ
                        sb = new StringBuffer();
                        sb.append(img.get(135 + i));
                        sb.delete(185, 185 + datee[i].length());
                        sb.insert(185, datee[i]);
                        img.set(135 + i, sb.toString());

//                        ໂທລະສັບ
                        sb = new StringBuffer();
                        sb.append(img.get(175 + i));
                        sb.delete(104,104 + tel[i].length());
                        sb.insert(104, tel[i]);
                        img.set(175 + i, sb.toString());

                        //                       versions
                        // sb = new StringBuffer();
                        //  sb.append(img.get(120 + i));
                        //  sb.delete(174,174 + version[i].length());
                        //  sb.insert(174, version[i]);
                        //  img.set(120 + i, sb.toString());
                    }
                }




                List<String> bmpHexList = binaryListToHexStringList(img);
//                String commandHexString = "1D763000";
                String widthHexString = Integer
                        .toHexString(bmpWidth % 8 == 0 ? bmpWidth / 8
                                : (bmpWidth / 8 + 1));
                if (widthHexString.length() > 2) {
                    Log.e("decodeBitmap error", " width is too large");
                    return;
                } else if (widthHexString.length() == 1) {
                    widthHexString = "0" + widthHexString;
                }
                widthHexString = widthHexString + "00";

                String heightHexString = Integer.toHexString(img.size());
                if (heightHexString.length() > 2) {
                    Log.e("decodeBitmap error", " height is too large");
                    return;
                } else if (heightHexString.length() == 1) {
                    heightHexString = "0" + heightHexString;
                }
                heightHexString = heightHexString + "00";

                ArrayList<String> commandList = new ArrayList<String>();
                commandList.add(commandHexString + widthHexString + heightHexString);
                commandList.addAll(bmpHexList);
                outputStream.write(hexList2Byte(commandList));
//                printfile.add(commandList);

                l += 1;
            }
//            for (ArrayList<String> printss : printfile) {
//                outputStream.write(hexList2Byte(printss));
//            }
            //String[] vers =versions;
           // for (int i = 0; i < 18; i++) {
             //  sb = new StringBuffer();
             //  sb.delete(174,174 + versions[i].length());
            //   sb.insert(174, versions[i]);
              //  outputStream.write(10);
              // outputStream.write(sb.toString());
          //  }

          //  byte[] format = new byte[]{0x1B,(byte) 0x61, (byte) 0x01};
          //  byte[] ver = new byte[ versions.length() ];
          // outputStream.write(ver);
          //  outputStream.write(10);

//            ບາໂຄດເຄີ່ງກາງ
            byte[] center = {(byte) 0x1B, (byte) 0x61, (byte) 0x01};
            outputStream.write(center);
            outputStream.write(10);

//            ບາໂຄດ

        //    String contentrpp02n ="Laosoftware.asia.th.co";
         //   byte[] contentrppo2ns = contentrpp02n.getBytes();

            String content = pbill.substring(9, pbill.length());
            byte[] contents = content.getBytes();
            byte[] formats;

            //String content1 = pbill.substring(9, pbill.length());
            String content1 = versions;
            byte[] contents1 = content1.getBytes();
            byte[] formatver;
          /**  if(device.getName().equals("RPP02N") || device.getName().equals("RPP-02")){
                formatver = new byte[]{(byte) 0x1d, (byte) 0x40, (byte) 0x1d, (byte) 0x02};
                byte[] bytes = new byte[formatver.length + contents1.length];
                System.arraycopy(formatver, 0, bytes, 0, formatver.length);
                System.arraycopy(contents1, 0, bytes, formatver.length, contents1.length);
                outputStream.write(bytes);
                outputStream.write(10);

            }else {
                formatver = new byte[]{(byte) 0x1d, (byte) 0x40, (byte) 0x1d, (byte) 0x02};
                byte[] bytes = new byte[formatver.length + contents1.length];
                System.arraycopy(formatver, 0, bytes, 0, formatver.length);
                System.arraycopy(contents1, 0, bytes, formatver.length, contents1.length);
                outputStream.write(bytes);
                outputStream.write(10);

            }
**/
            if(device.getName().equals("RPP02N") || device.getName().equals("RPP-02")){
              //  formats = new byte[]{(byte) 0x1d, (byte) 0x6b, (byte) 0x10, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x1f};
               // byte[] bytes = new byte[formats.length + contentrppo2ns.length];
              //  System.arraycopy(formats, 0, bytes, 0, formats.length);
             //   System.arraycopy(contentrppo2ns, 0, bytes, formats.length, contentrppo2ns.length);
              //  outputStream.write(bytes);
                formats = new byte[]{(byte) 0x1d, (byte) 0x6b, (byte) 0x49, (byte) 0x08};
                byte[] bytes = new byte[formats.length + contents.length];
                System.arraycopy(formats, 0, bytes, 0, formats.length);
                System.arraycopy(contents, 0, bytes, formats.length, contents.length);
                outputStream.write(bytes);
                //  outputStream.write(10);
//            }else if(device.getName().equals("PTP-II")){
            }else {
                formats = new byte[]{(byte) 0x1d, (byte) 0x6b, (byte) 0x47, (byte) 0x08};
                byte[] bytes = new byte[formats.length + contents.length];
                System.arraycopy(formats, 0, bytes, 0, formats.length);
                System.arraycopy(contents, 0, bytes, formats.length, contents.length);
                outputStream.write(bytes);
                outputStream.write(10);
                outputStream.write(10);

            }


            Bitmap check = BitmapFactory.decodeResource(activity.getResources(), R.drawable.checkimg);
//            Bitmap check = Bitmap.createScaledBitmap(obmp, 255, 80, false);
            ArrayList<String> checkimage = new ArrayList<String>();
            bmpWidth = check.getWidth();
            bmpHeight = check.getHeight();

            bitLen = bmpWidth / 8;
            zeroCount = bmpWidth % 8;
            zeroStr = "";
            if (zeroCount > 0) {
                bitLen = bmpWidth / 8 + 1;
                for (int i = 0; i < (8 - zeroCount); i++) {
                    zeroStr = zeroStr + "0";
                }
            }
            for (int i = 0; i < bmpHeight; i++) {
                sb = new StringBuffer();
                for (int j = 0; j < bmpWidth; j++) {
                    int color = check.getPixel(j, i);

                    int r = (color >> 16) & 0xff;
                    int g = (color >> 8) & 0xff;
                    int b = color & 0xff;

                    // if color close to white,bit='0', else bit='1'
                    if (r > 160 && g > 160 && b > 160)
                   // if (r > 160 && g > 160 )
                        sb.append("0");
                      //  sb.append("");
                    else
                        sb.append("1");
                      // sb.append("");
                }
                if (zeroCount > 0) {
                    sb.append(zeroStr);
                }
                checkimage.add(sb.toString());
            }


            String code = "";
            String code1 ="";
          //  String addnumbbill = "89";
           // String allnumbbill = (String.valueOf(addnumbbill) + String.valueOf(pbill));
            String allnumbbill = RandomCodeGoodBye1 ;
            for (int i = 0; i < allnumbbill.length(); i++) {
                //code += String.valueOf((int) allnumbbill.charAt(i));
                code +=  allnumbbill.charAt(i);
            }
            String allnumbbill1 = RandomCodeGoodBye2;
            for (int i= 0; i<allnumbbill1.length();i++){
                //code1 += String.valueOf((int) allnumbbill1.charAt(i));
                code1 +=  allnumbbill1.charAt(i);
            }

         //   String one = code.substring(0, 19);
         //   String two = code.substring(19,38);
            String one = code.substring(0, 16);
            String two = code1 .substring(0,16);
            String[] ones = checkNumber(one);
            String[] twos = checkNumber(two);

            for (int i = 0; i < 18; i++) {
             String r1 = "";
                String r2 = "";
                for (int j = 0; j < ones[i].length(); j++) {
                    if (ones[i].toString().substring(j, j + 1).equals("0")) {
                        r1 += "1";
                    } else {
                        r1 += "0";
                    }
                }
                for (int j = 0; j < twos[i].length(); j++) {
                    if (twos[i].toString().substring(j, j + 1).equals("0")) {
                        r2 += "1";
                    } else {
                        r2 += "0";
                    }
                }


               sb = new StringBuffer();
                sb.append(checkimage.get(1 + i));
                sb.delete(78, 78 + r1.length());
                sb.insert(78, r1);
                checkimage.set(1 + i, sb.toString());

            //    sb = new StringBuffer();
             //   sb.append(checkimage.get(31 + i));
             //   sb.delete(78, 78 + r2.length());
             //   sb.insert(78, r2);
              //  checkimage.set(31 + i, sb.toString());

                sb = new StringBuffer();
                sb.append(checkimage.get(61 + i));
                sb.delete(78, 78 + r2.length());
                sb.insert(78, r2);
                checkimage.set(61 + i, sb.toString());

             /**
                sb = new StringBuffer();
                sb.append(checkimage.get(1 + i));
                sb.delete(78, 78 + ones[i].length());
                sb.insert(78, ones[i]);
                checkimage.set(1 + i, sb.toString());

                sb = new StringBuffer();
                sb.append(checkimage.get(31 + i));
                sb.delete(78, 78 + twos[i].length());
                sb.insert(78, twos[i]);
                checkimage.set(31 + i, sb.toString());

                sb = new StringBuffer();
                sb.append(checkimage.get(61 + i));
                sb.delete(78, 78 + twos[i].length());
                sb.insert(78, twos[i]);
                checkimage.set(61 + i, sb.toString());
                **/
            }

            List<String> bmpHexList = binaryListToHexStringList(checkimage);
            String widthHexString = Integer
                    .toHexString(bmpWidth % 8 == 0 ? bmpWidth / 8
                            : (bmpWidth / 8 + 1));
            if (widthHexString.length() > 2) {
                Log.e("decodeBitmap error", " width is too large");
                return;
            } else if (widthHexString.length() == 1) {
                widthHexString = "0" + widthHexString;
            }
            widthHexString = widthHexString + "00";

            String heightHexString = Integer.toHexString(bmpHeight);
            if (heightHexString.length() > 2) {
                Log.e("decodeBitmap error", " height is too large");
                return;
            } else if (heightHexString.length() == 1) {
                heightHexString = "0" + heightHexString;
            }
            heightHexString = heightHexString + "00";
            ArrayList<String> commandList = new ArrayList<String>();
            commandList.add(commandHexString + widthHexString + heightHexString);
            commandList.addAll(bmpHexList);
            outputStream.write(hexList2Byte(commandList));
            outputStream.write("\n".getBytes());
            outputStream.write("\n".getBytes());
            outputStream.write("\n".getBytes());
            disConnectoprinter();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

//    public static void printThanks(Activity activity){
//        try{
////            connectoprinter(activity);
//            Bitmap check = BitmapFactory.decodeResource(activity.getResources(), R.drawable.checkimg);
//            ArrayList<String> checkimage = new ArrayList<String>();
//            int bmpWidth = check.getWidth();
//            int bmpHeight = check.getHeight();
//            StringBuffer sb;
//            int bitLen = bmpWidth / 8;
//            int zeroCount = bmpWidth % 8;
//            String zeroStr = "";
//            if (zeroCount > 0) {
//                bitLen = bmpWidth / 8 + 1;
//                for (int i = 0; i < (8 - zeroCount); i++) {
//                    zeroStr = zeroStr + "0";
//                }
//            }
//            for (int i = 0; i < bmpHeight; i++) {
//                sb = new StringBuffer();
//                for (int j = 0; j < bmpWidth; j++) {
//                    int color = check.getPixel(j, i);
//
//                    int r = (color >> 16) & 0xff;
//                    int g = (color >> 8) & 0xff;
//                    int b = color & 0xff;
//
//                    // if color close to white,bit='0', else bit='1'
//                    if (r > 160 && g > 160 && b > 160)
//                        sb.append("0");
//                    else
//                        sb.append("1");
//                }
//                if (zeroCount > 0) {
//                    sb.append(zeroStr);
//                }
//                checkimage.add(sb.toString());
//            }
//
//
//            String code = "";
//            for (int i = 0; i < pbill.length(); i++) {
//                code += String.valueOf((int) pbill.charAt(i));
//            }
//
//            String one = code.substring(0, 19);
//            String two = code.substring(19,38);
//            String[] ones = checkNumber(one);
//            String[] twos = checkNumber(two);
//
//            for (int i = 0; i < 18; i++) {
//                String r1 = "";
//                String r2 = "";
//                for (int j = 0; j < ones[i].length(); j++) {
//                    if (ones[i].toString().substring(j, j + 1).equals("0")) {
//                        r1 += "1";
//                    } else {
//                        r1 += "0";
//                    }
//                }
//                for (int j = 0; j < twos[i].length(); j++) {
//                    if (twos[i].toString().substring(j, j + 1).equals("0")) {
//                        r2 += "1";
//                    } else {
//                        r2 += "0";
//                    }
//                }
//                sb = new StringBuffer();
//                sb.append(checkimage.get(1 + i));
//                sb.delete(88, 88 + r1.length());
//                sb.insert(88, r1);
//                checkimage.set(1 + i, sb.toString());
//
//                sb = new StringBuffer();
//                sb.append(checkimage.get(61 + i));
//                sb.delete(88, 88 + r2.length());
//                sb.insert(88, r2);
//                checkimage.set(61 + i, sb.toString());
//            }
//
//            List<String> bmpHexList = binaryListToHexStringList(checkimage);
//            String widthHexString = Integer
//                    .toHexString(bmpWidth % 8 == 0 ? bmpWidth / 8
//                            : (bmpWidth / 8 + 1));
//            if (widthHexString.length() > 2) {
//                Log.e("decodeBitmap error", " width is too large");
//                return;
//            } else if (widthHexString.length() == 1) {
//                widthHexString = "0" + widthHexString;
//            }
//            widthHexString = widthHexString + "00";
//
//            String heightHexString = Integer.toHexString(checkimage.size());
//            if (heightHexString.length() > 2) {
//                Log.e("decodeBitmap error", " height is too large");
//                return;
//            } else if (heightHexString.length() == 1) {
//                heightHexString = "0" + heightHexString;
//            }
//            heightHexString = heightHexString + "00";
//            ArrayList<String> commandList = new ArrayList<String>();
//            commandList.add(commandHexString + widthHexString + heightHexString);
//            commandList.addAll(bmpHexList);
//            outputStream.write(hexList2Byte(commandList));
//            disConnectoprinter();
//        }catch (Exception e){
//            e.printStackTrace();
//        }
//    }

}
